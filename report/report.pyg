application
        : class_def END                                                                                                        { $$ = $1; main_application = $1; return 0; }
        ;

array_decl
        : type_object dims_empty_list                                                                        { $$ = insert_array_decl($1, $2); }
        ;

assign_op
        : var '=' expr                                                                                                        { $$ = insert_assign_op($1, t_assign_op_eq, $3); }
        | var SHIFT_R_ASSIGN expr                                                                                { $$ = insert_assign_op($1, t_assign_op_shift_r_eq, $3); }
        | var SHIFT_L_ASSIGN expr                                                                                { $$ = insert_assign_op($1, t_assign_op_shift_l_eq, $3); }
        | var ADD_ASSIGN expr                                                                                        { $$ = insert_assign_op($1, t_assign_op_add_eq, $3); }
        | var SUB_ASSIGN expr                                                                                        { $$ = insert_assign_op($1, t_assign_op_sub_eq, $3); }
        | var MUL_ASSIGN expr                                                                                        { $$ = insert_assign_op($1, t_assign_op_mul_eq, $3); }
        | var DIV_ASSIGN expr                                                                                        { $$ = insert_assign_op($1, t_assign_op_div_eq, $3); }
        | var MOD_ASSIGN expr                                                                                        { $$ = insert_assign_op($1, t_assign_op_mod_eq, $3); }
        | var AND_ASSIGN expr                                                                                        { $$ = insert_assign_op($1, t_assign_op_and_eq, $3); }
        | var XOR_ASSIGN expr                                                                                        { $$ = insert_assign_op($1, t_assign_op_xor_eq, $3); }
        | var OR_ASSIGN expr                                                                                        { $$ = insert_assign_op($1, t_assign_op_or_eq, $3); }
        ;

binary_op
        : expr '+' expr                                                                                                        { $$ = insert_binary_op_operation($1, t_binary_op_add, $3); }
        | expr '-' expr                                                                                                        { $$ = insert_binary_op_operation($1, t_binary_op_sub, $3); }
        | expr '*' expr                                                                                                        { $$ = insert_binary_op_operation($1, t_binary_op_mul, $3); }
        | expr '/' expr                                                                                                        { $$ = insert_binary_op_operation($1, t_binary_op_div, $3); }
        | expr '%' expr                                                                                                        { $$ = insert_binary_op_operation($1, t_binary_op_mod, $3); }

        | expr '&' expr                                                                                                        { $$ = insert_binary_op_operation($1, t_binary_op_and, $3); }
        | expr '|' expr                                                                                                        { $$ = insert_binary_op_operation($1, t_binary_op_or, $3); }
        | expr '^' expr                                                                                                        { $$ = insert_binary_op_operation($1, t_binary_op_xor, $3); }
        | expr SHIFT_R expr                                                                                                { $$ = insert_binary_op_operation($1, t_binary_op_shift_r, $3); }
        | expr SHIFT_L expr                                                                                                { $$ = insert_binary_op_operation($1, t_binary_op_shift_l, $3); }

        | expr AND_OP expr                                                                                                { $$ = insert_binary_op_operation($1, t_binary_op_logic_and, $3); }
        | expr OR_OP expr                                                                                                { $$ = insert_binary_op_operation($1, t_binary_op_logic_or, $3); }

        | expr EQ_OP expr                                                                                                { $$ = insert_binary_op_operation($1, t_binary_op_eq, $3); }
        | expr NE_OP expr                                                                                                { $$ = insert_binary_op_operation($1, t_binary_op_ne, $3); }
        | expr '<' expr                                                                                                        { $$ = insert_binary_op_operation($1, t_binary_op_l, $3); }
        | expr '>' expr                                                                                                        { $$ = insert_binary_op_operation($1, t_binary_op_g, $3); }
        | expr LE_OP expr                                                                                                { $$ = insert_binary_op_operation($1, t_binary_op_le, $3); }
        | expr GE_OP expr                                                                                                { $$ = insert_binary_op_operation($1, t_binary_op_ge, $3); }
        | expr EQ3_OP expr                                                                                                { $$ = insert_binary_op_operation($1, t_binary_op_eq3, $3); }
        | expr NE3_OP expr                                                                                                { $$ = insert_binary_op_operation($1, t_binary_op_ne3, $3); }
        | assign_op                                                                                                                { $$ = insert_binary_op_assign($1); }
        ;

break
        : BREAK ';'                                                                                                                { $$ = insert_break(NULL); }
        | BREAK ID ';'                                                                                                        { $$ = insert_break($2); } /* TODO labeled loops */
        ;

class_def
        : CLASS ID '{' '}'                                                                                                { $$ = insert_class_def($2, NULL); }
        | CLASS ID '{' class_stmt_list '}'                                                                { $$ = insert_class_def($2, $4); }
        ;

class_stmt
        : member_stmt                                                                                                        { $$ = insert_class_stmt(NULL, NULL, $1); }
        | class_stmt_privacy member_stmt                                                                { $$ = insert_class_stmt($1, NULL, $2); }
        | class_stmt_scope member_stmt                                                                        { $$ = insert_class_stmt(NULL, $1, $2); }
        | class_stmt_privacy class_stmt_scope member_stmt                                { $$ = insert_class_stmt($1, $2, $3); }
        ;

class_stmt_privacy
        : PUBLIC                                                                                                                { $$ = insert_class_stmt_privacy(t_class_stmt_privacy_public); }
        | PRIVATE                                                                                                                { $$ = insert_class_stmt_privacy(t_class_stmt_privacy_private); }
        ;

class_stmt_scope
        : FINAL                                                                                                                        { $$ = insert_class_stmt_scope(true, false); }
        | STATIC                                                                                                                { $$ = insert_class_stmt_scope(false, true); }
        | STATIC FINAL                                                                                                        { $$ = insert_class_stmt_scope(true, true); }
        | FINAL STATIC                                                                                                        { $$ = insert_class_stmt_scope(true, true); }
        ;

class_stmt_list
        : class_stmt                                                                                                        { $$ = insert_class_stmt_list($1, NULL); }
        | class_stmt class_stmt_list                                                                        { $$ = insert_class_stmt_list($1, $2); }
        ;

continue
        : CONTINUE ';'                                                                                                        { $$ = insert_continue(NULL); }
        | CONTINUE ID ';'                                                                                                { $$ = insert_continue($2); } /* TODO labeled loops */
        ;

dims
        : dims_sized_list                                                                                                { $$ = insert_dims($1, 0); }
        | dims_sized_list dims_empty_list                                                                { $$ = insert_dims($1, $2); }
        ;

dims_empty
        : '[' ']'                                                                                                                { }
        ;

dims_empty_list
        : dims_empty                                                                                                        { $$ = 1; }
        | dims_empty_list dims_empty                                                                        { $$ = $1 + 1; }
        ;

dims_sized
        : '[' expr ']'                                                                                                        { $$ = $2; }
        ;

/* this one is left recursive, can we swap it? if not attention to the constructors */
dims_sized_list
        : dims_sized                                                                                                        { $$ = insert_dims_sized_list(NULL, $1); }
        | dims_sized_list dims_sized                                                                        { $$ = insert_dims_sized_list($1, $2); }
        ;

do_while
        : DO stmt WHILE '(' expr ')' ';'                                                                { $$ = insert_do_while($2, $5); }
        ;

expr
        : var %prec LOW_PREC                                                                                        { $$ = insert_expr_var($1); }
        | new_op %prec LOW_PREC                                                                                        { $$ = insert_expr_new_op($1); }
        | '(' expr ')'                                                                                                        { $$ = $2; }
        | '(' type_decl ')' expr                                                                                 { $$ = insert_expr_type_cast($4, $2); }
        | CONSTANT                                                                                                                { $$ = insert_expr_constant($1); }
        | func_call                                                                                                                { $$ = insert_expr_func_call($1); }
        | expr_op                                                                                                                { $$ = insert_expr_expr_op($1); }
        ;

expr_list
        : expr                                                                                                                        { $$ = insert_expr_list($1, NULL); }
        | expr ',' expr_list                                                                                        { $$ = insert_expr_list($1, $3); }
        ;

expr_op
        : unary_op                                                                                                                { $$ = insert_expr_op_unary($1); }
        | binary_op                                                                                                                { $$ = insert_expr_op_binary($1); }
        | ternary_op                                                                                                        { $$ = insert_expr_op_ternary($1); }
        ;
for
        : FOR '(' for_init ';' for_cond ';' for_inc ')' stmt                        { $$ = insert_for($3, $5, $7, $9); }
        ;

for_cond
        : /* empty */                                                                                                        { $$ = NULL; }
        | expr                                                                                                                        { $$ = $1; }
        ;

for_expr
        : incr_op                                                                                                                { $$ = insert_for_expr_incr($1); }
        | assign_op                                                                                                                { $$ = insert_for_expr_assign($1); }
        | func_call                                                                                                                { $$ = insert_for_expr_func_call($1); }
        ;

for_expr_list
        : for_expr                                                                                                                 { $$ = insert_for_expr_list($1, NULL); }
        | for_expr ',' for_expr_list                                                                        { $$ = insert_for_expr_list($1, $3); }
        ;

for_init
        : /* empty */                                                                                                        { $$ = NULL; }
        | var_defs                                                                                                                { $$ = insert_for_init_var_defs($1); }
        | for_expr_list                                                                                                        { $$ = insert_for_init_for_expr_list($1); }
        ;

for_inc
        : /* empty */                                                                                                        { $$ = NULL; }
        | for_expr_list                                                                                                        { $$ = $1; }
        ;

func_call
        : ID func_call_arg_list                                                                                        { $$ = insert_func_call_id($1, $2); }
        | SYSOUT func_call_arg_list                                                                                { $$ = insert_func_call_sysout($2); }
        ;

func_call_arg_list
        : '(' ')'                                                                                                                { $$ = NULL; }
        | '(' expr_list ')'                                                                                                { $$ = $2; }
        ;

func_def
        : type_decl ID func_def_args '{' '}'                                                        { $$ = insert_func_def($1, $2, $3, NULL); }
        | type_decl ID func_def_args '{' stmt_list '}'                                        { $$ = insert_func_def($1, $2, $3, $5); }
        ;

func_def_arg
        : type_decl ID                                                                                                        { $$ = insert_func_def_arg($1, $2); }
        ;

func_def_arg_list
        : func_def_arg                                                                                                        { $$ = insert_func_def_arg_list($1, NULL); }
        | func_def_arg ',' func_def_arg_list                                                        { $$ = insert_func_def_arg_list($1, $3); }
        ;

func_def_args
        : '(' ')'                                                                                                                { $$ = NULL; }
        | '(' func_def_arg_list ')'                                                                                { $$ = $2; }
        ;

if
        : IF '(' expr ')' stmt %prec LOW_PREC                                                        { $$ = insert_if($3, $5, NULL); }
        | IF '(' expr ')' stmt ELSE stmt                                                                { $$ = insert_if($3, $5, $7); }
        ;

incr_op
        : INC_OP var                                                                                                        { $$ = insert_incr_op(t_incr_op_inc, true, $2); }
        | var INC_OP                                                                                                         { $$ = insert_incr_op(t_incr_op_inc, false, $1); }
        | DEC_OP var                                                                                                         { $$ = insert_incr_op(t_incr_op_dec, true, $2); }
        | var DEC_OP                                                                                                          { $$ = insert_incr_op(t_incr_op_dec, false, $1); }
        ;

loop_stmt
        : for                                                                                                                        { $$ = insert_loop_stmt_for(NULL, $1); }
        | ID ':' for                                                                                                        { $$ = insert_loop_stmt_for($1, $3); }
        | while                                                                                                                        { $$ = insert_loop_stmt_while(NULL, $1); }
        | ID ':' while                                                                                                        { $$ = insert_loop_stmt_while($1, $3); }
        | do_while                                                                                                                { $$ = insert_loop_stmt_do_while(NULL, $1); }
        | ID ':' do_while                                                                                                { $$ = insert_loop_stmt_do_while($1, $3); }
        ;

member_stmt
        : ';'                                                                                                                        { $$ = NULL; }
        | var_stmt                                                                                                                { $$ = insert_member_stmt_var($1); }
        | func_def                                                                                                                { $$ = insert_member_stmt_func_def($1); }
        ;

new_op
        : NEW type_object dims                                                                                        { $$ = insert_new_op($2, $3); }
        ;

return
        : RETURN ';'                                                                                                        { $$ = insert_return(NULL); }
        | RETURN expr ';'                                                                                                { $$ = insert_return($2); }
        ;

stmt
        : ';'                                                                                                                        { $$ = NULL; }
        | '{' '}'                                                                                                                { $$ = NULL; }
        | '{' stmt_list '}'                                                                                                { $$ = insert_stmt_stmt_list($2); }
        | var_stmt                                                                                                                { $$ = insert_stmt_var_stmt($1); }
        | assign_op ';'                                                                                                        { $$ = insert_stmt_assign_op($1); }
        | incr_op ';'                                                                                                        { $$ = insert_stmt_incr_op($1); }
        | if                                                                                                                        { $$ = insert_stmt_if($1); }
        | loop_stmt                                                                                                                { $$ = insert_stmt_loop_stmt($1); }
        | func_call        ';'                                                                                                        { $$ = insert_stmt_func_call($1); }
        | switch                                                                                                                { $$ = insert_stmt_switch($1); }
        | break                                                                                                                        { $$ = insert_stmt_break($1); }
        | continue                                                                                                                { $$ = insert_stmt_continue($1); }
        | return                                                                                                                { $$ = insert_stmt_return($1); }
        ;

stmt_list
        : stmt                                                                                                                        { $$ = insert_stmt_list($1, NULL);}
        | stmt stmt_list                                                                                                { $$ = insert_stmt_list($1, $2); }
        ;

switch
        : SWITCH '(' expr ')' '{' '}'                                                                        { $$ = insert_switch($3, NULL); }
        | SWITCH '(' expr ')' '{' switch_stmt_list '}'                                        { $$ = insert_switch($3, $6); }
        ;

switch_stmt
        : DEFAULT ':'                                                                                                        { $$ = insert_switch_stmt_default(NULL); }
        | DEFAULT ':' stmt_list                                                                                        { $$ = insert_switch_stmt_default($3); }
        | CASE CONSTANT ':'                                                                                                { $$ = insert_switch_stmt_case($2, NULL); }
        | CASE CONSTANT ':' stmt_list                                                                        { $$ = insert_switch_stmt_case($2, $4); }
        ;

switch_stmt_list
        : switch_stmt                                                                                                        { $$ = insert_switch_stmt_list($1, NULL); }
        | switch_stmt switch_stmt_list                                                                         { $$ = insert_switch_stmt_list($1, $2); }
        ;

ternary_op
        : expr '?' expr ':' expr                                                                                { $$ = insert_ternary_op($1, $3, $5); }
        ;

type_decl
        : type_object                                                                                                        { $$ = insert_type_decl_object($1); }
        | array_decl                                                                                                        { $$ = insert_type_decl_array($1); }
        ;

type_native
        : BOOL                                                                                                                        { $$ = t_type_native_bool; }
        | BYTE                                                                                                                        { $$ = t_type_native_byte; }
        | CHAR                                                                                                                        { $$ = t_type_native_char; }
        | DOUBLE                                                                                                                { $$ = t_type_native_double; }
        | FLOAT                                                                                                                        { $$ = t_type_native_float; }
        | INT                                                                                                                        { $$ = t_type_native_int; }
        | LONG                                                                                                                        { $$ = t_type_native_long; }
        | SHORT                                                                                                                        { $$ = t_type_native_short; }
        | STRING                                                                                                                { $$ = t_type_native_string; }
        | VOID                                                                                                                        { $$ = t_type_native_void; }
        ;

type_object
        : type_native                                                                                                        { $$ = insert_type_object($1); }
        /* | ID                                                                                                                        { } Object constructors */
        ;

unary_op
        : incr_op                                                                                                                { $$ = insert_unary_op_incr($1); }
        | '+' expr                                                                                                                { $$ = insert_unary_op_operation(t_unary_op_operator_plus, $2); }
        | '-' expr                                                                                                                { $$ = insert_unary_op_operation(t_unary_op_operator_minus, $2); }
        | '!' expr                                                                                                                { $$ = insert_unary_op_operation(t_unary_op_operator_not, $2); }
        | '~' expr                                                                                                                { $$ = insert_unary_op_operation(t_unary_op_operator_bin_not, $2); }
        ;

var
        : ID %prec LOW_PREC                                                                                                { $$ = insert_var_id($1); }
        | '(' var ')'                                                                                                         { $$ = $2; }
        | '(' new_op ')'                                                                                                { $$ = insert_var_new_op($2); }
        | var dims_sized                                                                                                { $$ = insert_var_var_subscript($1, $2); }
        | func_call dims_sized                                                                                        { $$ = insert_var_func_subscript($1, $2); }
        ;

var_def
        : var_def_left                                                                                                        { $$ = insert_var_def($1, NULL); }
        | var_def_left '=' var_initializer                                                                { $$ = insert_var_def($1, $3); }
        ;

var_def_list
        : var_def                                                                                                                { $$ = insert_var_def_list($1, NULL); }
        | var_def ',' var_def_list                                                                                { $$ = insert_var_def_list($1, $3); }
        ;

var_def_left
        : ID                                                                                                                        { $$ = insert_var_def_left_empty($1, 0); }
        | ID dims                                                                                                                { $$ = insert_var_def_left_dims($1, $2); }
        | ID dims_empty_list                                                                                        { $$ = insert_var_def_left_empty($1, $2); }
        ;

var_defs
        : type_decl var_def_list                                                                                { $$ = insert_var_defs($1, $2); }
        ;

var_initializer
        : '{' '}'                                                                                                                 { $$ = insert_var_initializer_array(NULL); }
        | '{' var_initializer_list '}'                                                                        { $$ = insert_var_initializer_array($2); }
        | '{' var_initializer_list ',' '}'                                                                { $$ = insert_var_initializer_array($2); }
        | expr                                                                                                                        { $$ = insert_var_initializer_expr($1); }
        ;

/* this one is left recursive, can we swap it? if not attention to the constructors */
var_initializer_list
        : var_initializer                                                                                                { $$ = insert_var_initializer_list(NULL, $1); }
        | var_initializer_list ',' var_initializer                                                { $$ = insert_var_initializer_list($1, $3); }
         ;

var_stmt
        : var_defs ';'                                                                                                        { $$ = $1; }
        ;

while
        : WHILE '(' expr ')' stmt                                                                                { $$ = insert_while($3, $5); }
        ;
